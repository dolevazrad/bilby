import bilby
import numpy as np
from bilby.gw.waveform_generator import WaveformGenerator
from bilby.gw.source import lal_binary_black_hole
from bilby.core.prior import Uniform, Cosine, Sine
import matplotlib.pyplot as plt

def create_noise_psd(frequency_array, noise_level):
    """Create a simple noise PSD with varying noise level"""
    asd = noise_level * (1 + (frequency_array / 50)**2)**0.5
    return asd**2

def simulate_signal_with_noise(duration, sampling_frequency, parameters, noise_level):
    """Simulate a GW signal with specified noise level"""
    # Set up time and frequency arrays
    time_array = np.arange(0, duration, 1/sampling_frequency)
    frequency_array = np.linspace(20, sampling_frequency/2, int(duration*sampling_frequency/2))
    
    # Create waveform generator
    waveform_generator = WaveformGenerator(
        duration=duration,
        sampling_frequency=sampling_frequency,
        frequency_domain_source_model=lal_binary_black_hole,
        parameter_conversion=bilby.gw.conversion.convert_to_lal_binary_black_hole_parameters,
        waveform_arguments={'waveform_approximant': 'IMRPhenomD', 
                          'reference_frequency': 50}
    )
    
    # Generate noise PSD
    psd = create_noise_psd(frequency_array, noise_level)
    
    # Create interferometer
    ifo = bilby.gw.detector.get_interferometer_with_fake_noise_and_injection(
        "H1", 
        sampling_frequency=sampling_frequency,
        duration=duration,
        injection_parameters=parameters,
        waveform_generator=waveform_generator,
        power_spectral_density=bilby.gw.detector.PowerSpectralDensity(
            frequency_array=frequency_array,
            psd_array=psd
        )
    )
    
    return ifo

def run_parameter_estimation(ifo, duration, sampling_frequency, injection_parameters):
    """Run parameter estimation on the data"""
    # Set up priors
    priors = bilby.gw.prior.BBHPriorDict()
    priors['mass_1'] = Uniform(20, 80, 'mass_1')
    priors['mass_2'] = Uniform(20, 80, 'mass_2')
    priors['chi_1'] = Uniform(-0.9, 0.9, 'chi_1')
    priors['chi_2'] = Uniform(-0.9, 0.9, 'chi_2')
    priors['luminosity_distance'] = Uniform(100, 2000, 'luminosity_distance')
    priors['theta_jn'] = Sine('theta_jn')
    priors['phase'] = Uniform(0, 2*np.pi, 'phase')
    
    # Set up likelihood
    likelihood = bilby.gw.likelihood.GravitationalWaveTransient(
        interferometers=[ifo],
        waveform_generator=WaveformGenerator(
            duration=duration,
            sampling_frequency=sampling_frequency,
            frequency_domain_source_model=lal_binary_black_hole,
            parameter_conversion=bilby.gw.conversion.convert_to_lal_binary_black_hole_parameters,
            waveform_arguments={'waveform_approximant': 'IMRPhenomD', 
                              'reference_frequency': 50}
        )
    )
    
    # Run sampler
    result = bilby.run_sampler(
        likelihood=likelihood,
        priors=priors,
        sampler='dynesty',
        npoints=1000,
        injection_parameters=injection_parameters,
        outdir='outdir',
        label=f'GW_analysis'
    )
    
    return result

def main():
    # Set up parameters
    duration = 4
    sampling_frequency = 2048
    
    # True parameters for the binary black hole system
    injection_parameters = dict(
        mass_1=36.0,
        mass_2=29.0,
        chi_1=0.4,
        chi_2=-0.3,
        luminosity_distance=1000.0,
        theta_jn=0.4,
        phase=1.3,
        geocent_time=0.0,
        ra=1.375,
        dec=-1.2108,
        psi=2.659,
    )
    
    # Day 1 analysis (higher noise)
    print("Running Day 1 analysis...")
    ifo_day1 = simulate_signal_with_noise(
        duration, 
        sampling_frequency, 
        injection_parameters, 
        noise_level=1e-22  # Higher noise level for day 1
    )
    
    result_day1 = run_parameter_estimation(
        ifo_day1, 
        duration, 
        sampling_frequency, 
        injection_parameters
    )
    
    # Day 50 analysis (lower noise)
    print("Running Day 50 analysis...")
    ifo_day50 = simulate_signal_with_noise(
        duration, 
        sampling_frequency, 
        injection_parameters, 
        noise_level=5e-23  # Lower noise level for day 50
    )
    
    # Use day 1 results to inform day 50 priors
    refined_priors = bilby.gw.prior.BBHPriorDict()
    
    # Set new priors based on day 1 results
    for key in ['mass_1', 'mass_2', 'chi_1', 'chi_2', 'luminosity_distance']:
        median = np.median(result_day1.posterior[key])
        std = np.std(result_day1.posterior[key])
        refined_priors[key] = Uniform(
            median - 2*std, 
            median + 2*std, 
            key
        )
    
    # Keep original priors for angles
    refined_priors['theta_jn'] = Sine('theta_jn')
    refined_priors['phase'] = Uniform(0, 2*np.pi, 'phase')
    
    # Run PE with refined priors
    result_day50 = run_parameter_estimation(
        ifo_day50, 
        duration, 
        sampling_frequency, 
        injection_parameters
    )
    
    # Plot results
    fig = plt.figure(figsize=(15, 10))
    
    # Plot mass_1 posterior comparison
    plt.subplot(221)
    plt.hist(result_day1.posterior['mass_1'], bins=50, alpha=0.5, label='Day 1')
    plt.hist(result_day50.posterior['mass_1'], bins=50, alpha=0.5, label='Day 50')
    plt.axvline(injection_parameters['mass_1'], color='k', linestyle='--')
    plt.xlabel('Mass 1 (M⊙)')
    plt.legend()
    
    # Plot mass_2 posterior comparison
    plt.subplot(222)
    plt.hist(result_day1.posterior['mass_2'], bins=50, alpha=0.5, label='Day 1')
    plt.hist(result_day50.posterior['mass_2'], bins=50, alpha=0.5, label='Day 50')
    plt.axvline(injection_parameters['mass_2'], color='k', linestyle='--')
    plt.xlabel('Mass 2 (M⊙)')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('parameter_estimation_comparison.png')
    plt.close()

if __name__ == "__main__":
    main()